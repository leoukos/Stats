### Estimation de densité et Tests d'ajustement ###

### Partie 1
X = rnorm(2000, mean=0, sd=1)
x = seq(-4, 4, by=0.1)
y = dnorm(x)

# 4 plots
par(mfrow=c(2,2))

# fenêtre par défaut
h="nrd0"
# N = 50 , 100 , 500 , 2000
Val = c(50, 100, 500, 2000)
for(N in Val)
{
  est1 = density(X[1:N], bw=h, kernel=c("rectangular"))
  est2 = density(X[1:N], bw=h, kernel=c("gaussian"))

  title=paste('Densité (N=', N, ')')
  plot(x, y, xlab="Valeurs de x", ylab="densité", main=title, col="red", lwd=2)
  rug(X[1:N])
  lines(est1, col="green", lwd=2)
  lines(est2, col="blue", lwd=2)
}

# Variation de la fenêtre
par(mfrow=c(2,2))
N = 2000
X = rnorm(N, mean=0, sd=1)
Fen = c(0.2, 0.3, 0.4, 0.5)
for(h in Fen)
{
	h = N^(-h)
	est = density(X, bw=h, kernel=c("gaussian"))
	title = paste('Densité bw=n/(-', h, ')')
	plot(x, y, xlab="Valeurs de x", ylab="densité", main=title, col="red", lwd=2)
	rug(X)
	lines(est, col="blue", lwd=2)
}


### Partie 2
# varriables ozon, temp et vent
pol = read.table("http://lmi.insa-rouen.fr/~portier/Data/donpol.txt", header=TRUE)
summary(pol)
attach(pol)
n = length(ozon)
h = "nrd0"
kernel = "gaussian"

par(mfrow=c(1,3))
title=paste('Densité de ozon \n Shapiro-Wilk : p-value=', sprintf("%.3e", shapiro.test(ozon)[2]))
hist(ozon, freq=FALSE, main=title)
lines(density(ozon, bw=h, kernel=c(kernel)), col="blue1")
rug(ozon)
title=paste('Densité de temp \n Shapiro-Wilk : p-value=',sprintf("%.3e", shapiro.test(temp)[2]))
hist(temp, freq=FALSE, main=title)
lines(density(temp, bw=h, kernel=c(kernel)), col="blue")
rug(temp)
title=paste('Densité de vent \n Shapiro-Wilk : p-value=', sprintf("%.3e", shapiro.test(vent)[2]))
hist(vent, freq=FALSE, main=title)
lines(density(vent, bw=h, kernel=c(kernel)), col="blue")
rug(vent)

### Partie 3
n = 100
H0_sw = 0 
H1_sw = 0
H0_ks = 0 
H1_ks = 0
for(N in 1:200)
{
  # tirage de vecteurs aléatoires
  #x = rnorm(n, mean = 0, sd = 1)
  x = runif(n, min=-2, max=2) 
  #x = rt(n, 5)
  #x = rt(n, 10)
  #x = rt(n, 30)
  
  # Tests
  #if(shapiro.test(x)[2]>0.05)
  #{
  #  H0_sw = H0_sw + 1
  #} else {
  #  H1_sw = H1_sw + 1
  #}
  
  if(ks.test(x, "punif")[2]>0.05)
  {
    H0_ks = H0_ks + 1
  } else {
    H1_ks = H1_ks + 1
  }
}
#cat('Test de Shapiro-Wilk ( n =', n, ') :\n', H0_sw / 2, ' : ', H1_sw / 2, '\n')
cat('Test de Kolmogorov-Smirnov ( n =', n, ') :\n', H0_ks / 2, ' : ', H1_ks / 2, '\n')

# La puissance empirique c'est le nombre de bonne décision.
# Kolmog moins puissant de shapiro sur la normalité
