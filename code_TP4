##### Code TP4
# Taux de croissance de bactérie à différente température

# Package nls
library(proto)
library(nls2)

# Fonction
# Tmin : température en deça de laquelle il n'y a plus de croissance
# Tmax : température au delà de laquelle il n'y a plus de croissance
# Topt : température pour laquelle le taux de croissance Yopt est maximal
# Yopt : taux de croissance maximal
F = function(t, Tmin, Tmax, Topt, Yopt){
#  if( t > Tmin && t < Tmax)
    F = (Yopt*(t-Tmax)*(t-Tmin)^2)/ ((Topt-Tmin)*((Topt-Tmin)*(t-Topt)-(Topt-Tmax)*(Topt+Tmin-2*t)))
#  else
#    F = 0
}

F2 = function(T,Tmin,Tmax,Topt,Yopt){
Ind = 0*T
Ind[(T >= Tmin)&(T<=Tmax)] = 1
F = Yopt*(T-Tmax)*(T-Tmin)^2 / ((Topt-Tmin)*((Topt-Tmin)*
(T-Topt)-(Topt-Tmax)*(Topt+Tmin-2*T)))*Ind
}

# Données
data = read.table("http://lmi.insa-rouen.fr/~portier/Data/barber.txt", header=TRUE)
attach(data)
summary(data)

#jpeg("Nuage de points - Paramètres intiaux.jpeg")
plot(data, main="Nuage de points")
rug(Temperature)

# Conditions intiales
Tmin_ini = 8
Tmax_ini = 50
Topt_ini = 40
Yopt_ini = 2.3

y = NULL
for(t in 1:50){
  #y[t]=F(t, Tmin_ini, Tmax_ini, Topt_ini, Yopt_ini)
  y[t]=F2(t, Tmin_ini, Tmax_ini, Topt_ini, Yopt_ini)
}
lines(y, col="green", lwd=2)

# Autres conditions initiales
#Tmin_ini = 5
#Tmax_ini = 48
#Topt_ini = 42
#Yopt_ini = 2.0
#y = NULL
#for(t in 1:50){
#  y[t]=F(t, Tmin_ini, Tmax_ini, Topt_ini, Yopt_ini)
#}
#lines(y, col="blue", lwd=2)

#Tmin_ini = 10
#Tmax_ini = 48
#Topt_ini = 40
#Yopt_ini = 2.5
#y = NULL
#for(t in 1:50){
#  y[t]=F(t, Tmin_ini, Tmax_ini, Topt_ini, Yopt_ini)
#}
#lines(y, col="red", lwd=2)

# Estimation des paramètres du modèle
Y=TauxCroissance
T=Temperature
#nlsmod = nls(Y ~ Yopt * (T - Tmax) * (T - Tmin)^2 / ((Topt - Tmin) * ((Topt - Tmin) * (T - Topt) - (Topt - Tmax) * (Topt + Tmin - 2 * T))), start=list(Tmin=Tmin_ini, Tmax=Tmax_ini, Topt=Topt_ini, Yopt=Yopt_ini), trace=FALSE)

# What does this do ?
#fmla <- as.formula(Y ~ Yopt * (T - Tmax) * (T - Tmin)^2 / ((Topt - Tmin) * ((Topt - Tmin) * (T - Topt) - (Topt - Tmax) * (Topt + Tmin - 2 * T))))
#summary(fmla)

# deuxième fonction
nlsmod = nls(Y~F2(T,Tmin,Tmax,Topt,Yopt),start=c(Tmin=Tmin_ini ,Tmax=Tmax_ini ,Topt=Topt_ini ,Yopt=Yopt_ini))

# Calcul de l'ajustement
Tmin = summary(nlsmod)$param[1]
Tmax = summary(nlsmod)$param[2]
Topt = summary(nlsmod)$param[3]
Yopt = summary(nlsmod)$param[4]
for(t in 1:50){
  #y[t]=F(t, Tmin, Tmax, Topt, Yopt)
  y[t]=F2(t, Tmin, Tmax, Topt, Yopt)
}
lines(y, col="red", lwd=2)
#dev.off()

# Nuage observé/prévu
#jpeg("Nuage observé-prévu.jpeg")
plot(TauxCroissance, predict(nlsmod), xlab="Observé", ylab="Prévu", main="Nuage observé-prévu")
abline(0, 1, lwd=2, col="red")
#dev.off()

# rédisus non normalisés
#jpeg("Résidus non normalisés.jpeg")
R = residuals(nlsmod)
plot(T, R, main="Résidus non normalisés", xlab="Température", ylab="Résidus")
abline(0, 0, lwd=2, col="red")
#dev.off()

# Estimation Bootstrap
res = R - mean(R) # on recentre
n = length(Temperature)
B = 1000
Tmin_bs = NULL
Tmax_bs = NULL
Topt_bs = NULL
Yopt_bs = NULL
Y_bs = matrix(data = NA, nrow = B, ncol = n)
for(b in 1:B){
  ind=sample(1:n, replace=TRUE)
  Ybs = predict(nlsmod) + res[ind]
  #ND = data.frame(T, Ybs)
  nlsmod_bs = nls(Ybs ~ F2(T,Tmin,Tmax,Topt,Yopt),start=c(Tmin=Tmin_ini ,Tmax=Tmax_ini ,Topt=Topt_ini ,Yopt=Yopt_ini))
  Tmin_bs[b] = coef(nlsmod_bs)[1]
  Tmax_bs[b] = coef(nlsmod_bs)[2]
  Topt_bs[b] = coef(nlsmod_bs)[3]
  Yopt_bs[b] = coef(nlsmod_bs)[4]
  Y_bs[b,] = predict(nlsmod)
}
# Estimation de l'erreur standard pour les paramètres
cat('Tmin : ', sd(Tmin_bs), '\n')
cat('Tmax : ', sd(Tmax_bs), '\n')
cat('Topt : ', sd(Topt_bs), '\n')
cat('Yopt : ', sd(Yopt_bs), '\n')
summary(nlsmod)

# Distribution
jpeg("Distribution paramètres bootstrap.jpeg")
par(mfrow=c(2,2))
hist(Tmin_bs, main="Distribution bootstrap Tmin", xlab="Tmin", ylab="Frequency",  freq=TRUE)
abline(v=c(0, mean(Tmin_bs)), col="red", lwd=2)

hist(Tmax_bs, main="Distribution bootstrap Tmax", xlab="Tmax", ylab="Frequency",  freq=TRUE)
abline(v=c(0, mean(Tmax_bs)), col="red", lwd=2)

hist(Topt_bs, main="Distribution bootstrap Topt", xlab="Topt", ylab="Frequency",  freq=TRUE)
abline(v=c(0, mean(Topt_bs)), col="red", lwd=2)

hist(Yopt_bs, main="Distribution bootstrap Yopt", xlab="Yopt", ylab="Frequency",  freq=TRUE)
abline(v=c(0, mean(Yopt_bs)), col="red", lwd=2)
dev.off()

# Intervalles de confiance
cat('Intervalle de confiance pour Tmin : [', sort(Tmin_bs)[25], ';', sort(Tmin_bs)[975], ']\n')
cat('Intervalle de confiance pour Tmax : [', sort(Tmax_bs)[25], ';', sort(Tmax_bs)[975], ']\n')
cat('Intervalle de confiance pour Topt : [', sort(Topt_bs)[25], ';', sort(Topt_bs)[975], ']\n')
cat('Intervalle de confiance pour Topt : [', sort(Yopt_bs)[25], ';', sort(Yopt_bs)[975], ']\n')

# Bandes de confiance
y_inf = NULL
y_sup = NULL
for(b in 1:n){
y_inf[b] = quantile(Y_bs[,b], probs=0.025)
y_sup[b] = quantile(Y_bs[,b], probs=0.975)
}
# Afficher l'ajustement
jpeg("Bandes de confiances.jpeg")
plot(data, main="Nuage de points")
lines(y, col="red", lwd=2)
lines(T, y_inf, col="blue", lwd=2)
lines(T,y_sup, col="blue", lwd=2)
dev.off()

