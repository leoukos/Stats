# Estimation par backfitting dans les modèles additifs non linéaires
library(nlme)
library(mgcv)

### Etude par Simulation
# fonctions
f1 = function(x){
	f1 = x^2 - 1
}

f2 = function(x){
	f2 = x/2
}

f3 = function(x){
	f3 = 0.2*x^11*(10*(1-x))^6+10*(10*x)^3 *(1-x)^10
}

# Simulation
n = 1000
sig2 = 0.25
mu = 0
x1 = rnorm(n, mean=0, sd=1)
x2 = rnorm(n, mean=0, sd=1)
x3 = runif(n, min=0, max=1)

y = mu + f1(x1) + f2(x2) + f3(x3) + rnorm(n, mean=0, sd=sqrt(sig2))

# Estimation
modgam <- gam(y ~ s(x1) + s(x2) + s(x3))
summary(modgam)
# EDF proche de 1 = linéaire
# étudier l'influence de passer x2 en linéaire

#par(mfrow=c(1,3))
#plot(modgam)

#par(mfrow=c(1,3))
#plot(modgam, scale=0)
#plot(modgam, pages=1)


par(mfrow=c(2, 2))
plot(modgam,scale=0,select=1,shade=TRUE, shade.col="cyan", lwd=2)
lines(seq(-4, 4, by=0.1),f1(seq(-4, 4, by=0.1)), col="red", lwd=2) 
plot(modgam,scale=0,select=2,shade=TRUE, shade.col="cyan")
lines(seq(-4, 4, by=0.1),f2(seq(-4, 4, by=0.1)), col="red", lwd=2)
plot(modgam,scale=0,select=3,shade=TRUE, shade.col="cyan")
#lines(seq(0, 1, by=0.01),f3(seq(0, 1, by=0.01)), col="red", lwd=2)


#plot(modgam,pages=1,residuals=TRUE)
gam.check(modgam)
shapiro.test(modgam$res)
yc <- predict(modgam)


# Comparaison avec x2 en linéaire
modgam2 <- gam(y ~ s(x1) + x2 + s(x3))
summary(modgam2)
#AIC(modgam, modgam2)

# Estimation partielle
# on va estimer f3 
par(mfrow=c(3,3))
hist(x2)
plot(x1, x3, main="Nuage x1 - x2")

# Estimateur partiel x1
region = matrix(data = NA, ncol=2, nrow=2)
region[1,1] = quantile(x2, 1/3)
region[1,2] = quantile(x2, 2/3)
region[2,1] = quantile(x3, 1/3)
region[2,2] = quantile(x3, 2/3)

plot(x2, x3)
abline(v=region[1,1])
abline(v=region[1,2])
abline(h=region[2,1])
abline(h=region[2,2])

x2_g = which(x2 <= region[1,1])
x2_m = which(x2 > region[1,1] & x2 < region[1,2])
x2_d = which(x2 >= region[1,2])

x3_b = which(x3 <= region[2,1])
x3_m = which(x3 > region[2,1] & x2 < region[2,2])
x3_h = which(x3 >= region[2,2])


###############################################################
###############################################################

### Données pollution
# mettre des poids sur les observatrions
# etudier le modèle linéaire
# scores prévus observés
# Récupération
data = read.table("http://lmi.insa-rouen.fr/~portier/Data/p13.txt", header=TRUE)
attach(data)

# Analyse données
plot(data)
cor(data)

# Echantillon d'apprentissage et de test
set.seed(111)
test.ratio = .2
npop = nrow(data)
nvar = ncol(data)
ntest = ceiling(npop*test.ratio)
testi = sample(1:npop, ntest)
appri = setdiff(1:npop, testi)
appr = data[appri,]
test = data[testi,]
summary(appr)
summary(test)

appr_ozon = appr$ozon
appr_temp = appr$temp
appr_vent = appr$vent
appr_mozon = appr$mozon

test_ozon = test$ozon
test_temp = test$temp
test_vent = test$vent
test_mozon = test$mozon

# Estimation
modgam <- gam(appr_ozon ~ s(appr_temp) + s(appr_vent) + s(appr_mozon))
summary(modgam)

par(mfrow=c(2, 2))
plot(modgam,scale=0,select=1,shade=TRUE, shade.col="cyan")
plot(modgam,scale=0,select=2,shade=TRUE, shade.col="cyan")
plot(modgam,scale=0,select=3,shade=TRUE, shade.col="cyan")

# Erreur estimation
gam.check(modgam)

# Prediction
test_data <- data.frame(appr_temp=test_temp, appr_vent=test_vent, appr_mozon=test_mozon)
pred <- predict(modgam, test_data, se.fit = TRUE)
pred_ozon = pred$fit
pred_err = pred$se.fit

plot(test_ozon, pred_ozon, main="Nuage observé prévu")
abline(0,1, col="red", lwd=2)

# Performances
source("Perfo.R")
source("TabDep.R")
Perfo(test_ozon, test_mozon, pred_ozon)
TabDep(test_ozon, pred_ozon, 130, 180, 130)


######################################
# Estimateurs partiels

x1 = vent
x2 = mozon
x3 = temp

### A jeter
# Regions etc
region = matrix(data = NA, ncol=2, nrow=2)
region[1,1] = quantile(vent, 1/3)
region[1,2] = quantile(vent, 2/3)
region[2,1] = quantile(mozon, 1/3)
region[2,2] = quantile(mozon, 2/3)

plot(vent, mozon)
abline(v=region[1,1])
abline(v=region[1,2])
abline(h=region[2,1])
abline(h=region[2,2])

vent_g = which(vent <= region[1,1])
vent_m = which(vent > region[1,1] & vent < region[1,2])
vent_d = which(vent >= region[1,2])

mozon_b = which(mozon <= region[2,1])
mozon_m = which(mozon > region[2,1] & vent < region[2,2])
mozon_h = which(mozon >= region[2,2])



